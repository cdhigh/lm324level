#!/usr/bin/env python
#-*- coding:utf-8 -*-
"""一乐论坛3AG1老师的LM324电池电量指示电路设计软件，原帖：
    <https://www.yleee.com.cn/thread-84439-1-1.html>
    Author: cdhigh
"""
import os
from functools import partial
from tkinter import *
from tkinter.font import Font
from tkinter.ttk import *
#Usage:showinfo/warning/error,askquestion/okcancel/yesno/retrycancel
from tkinter.messagebox import *
from lm324_algorithm import *

schData1 = """
    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"""

schData2 = """
    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"""

#字符串转浮点数，，出错则返回defaultValue
def str_to_float(txt: str, defaultValue: float=0.0) -> float:
    try:
        txt = txt.replace(',', '.')
        return float(txt) #float()会自动strip()
    except:
        return defaultValue

#将文本型的电阻值转换为浮点，错误返回0.0
def resistorTxtToFloat(txt: str):
    txt = txt.strip().lower().replace(' ', '')
    if not txt:
        return 0.0

    multiply = 1
    if txt[-1] == 'k':
        multiply = 1000
        txt = txt[:-1]
    elif txt[-1] == 'm':
        multiply = 1000000
        txt = txt[:-1]

    try:
        return float(txt) * multiply
    except:
        return 0.0

#将浮点表示的电阻值转换为文本
def resistorFloatToTxt1(value: float):
    txt = str(round(value))
    if txt.endswith('000000'):
        txt = txt[:-6] + 'm'
    elif txt.endswith('000'):
        txt = txt[:-3] + 'k'
    return txt

#将浮点表示的电阻值转换为文本
def resistorFloatToTxt(value: float):
    surfixes = ['k', 'm']
    if value < 1000:
        return str(round(value))
    else:
        for i, surfix in enumerate(surfixes):
            unit = 1000 ** (i + 2)
            if value < unit:
                txt = '{:.1f}'.format(1000 * value / unit)
                if txt.endswith('.0'):
                    txt = txt[:-2]
                return '{}{}'.format(txt, surfix)

        txt = '{:.1f}'.format(1000 * value / unit)
        if txt.endswith('.0'):
            txt = txt[:-2]
        return '{}{}'.format(txt, surfix)

class Application_ui(Frame):
    #这个类仅实现界面生成功能，具体事件处理代码在子类Application中。
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.master.title('LM324电量指示设计软件v1.2')
        self.master.geometry('821x559+269+59')
        self.master.resizable(0,0)
        self.icondata = """
            R0lGODlhHAEcAfcAAAAAAP///////gCQOiYXGCccHSIYGSQbHCceHyMbHCggISAZGiEa
            GyMcHSQZGyQeHywmJyEXGSMZGyEcHSYdHxsTFR4WGCEZGyQcHiMfICUWGiQZHCocICMZ
            HBUPESQbHiMdH/77/CMbHh8aHCAbHSEcHiQZHv/9/hsYGiAdHyYjJSkmKBQTFSEhIzo6
            O/7+/wMFCygpLElKTQ8QEiQmKhkbHhYYGj5AQvDz9vn7/fz9/h8kKBsfIhsiJyAjJebs
            8Pn8/g0VGhUeIy4zNtLg6CYwNU1VWfb6/Pv9/vr8/fb4+R0pLi09RCErL/H4+wMRFhQr
            NBMgJRAbHxckKTpHTBopLh4nKvn8/QMZHw8kKhQvNyQuMQkhJxstMWNoafn7+/z9/QOf
            gQCadQCWbQCbbDSphACYZACUYQCOXACYXQCUXACWVwCQVSujbwCVUgCUUACRTgCNSQCY
            TQCUSQCRSR2iX16whgCRRACOQhGbUQCWRACSQQCLPgCTPwCQPwCQPACOPgCNOwCLOgCV
            PQCUOwCSPACSOgCROgCQOQCPOQCPOhGZSACYOgCVOQCSOQCONwGUNwqWP1OrdQiVNiub
            TRSYOTuiTymXNpvGm/P387bSqdnnw9Hgt/v8+fj59s3am9Pdpunt0O7x3OfpwvP04OPk
            rPr68f//+Pz89v//+////f7+/fz8++/uyvXz1Pj23fv67Pr56/b15/798vHst//+9v7z
            sPnwvvbwyvz20vv22f/75v/76P70x/30y//31P/42v/54P/87//yxP/1zv744//67f76
            8v779f78+P37+P/9+/749Pfayv3s4vDn4riglObOwvDu7fjNutC5rvng1qOVj/708P7z
            73FoZYaAfoB6eCQZFiEaGCIaGJOHhCMeHVlTUndxcP/5+DQfHCMcGyEZGCQcGykcGyQa
            GSwdHCsVFBgODioZGSQWFicaGiQZGS4gIDMmJiQbGyceHiMbGyQcHCwjIyQdHSMeHiIh
            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
            U1AFV5AFFFvQBV8QBmNQBmeQBmvQBm9Q2wICADs"""
        self.iconimg = PhotoImage(data=self.icondata)
        self.master.tk.call('wm', 'iconphoto', self.master._w, self.iconimg)
        self.createWidgets()

    def createWidgets(self):
        self.top = self.winfo_toplevel()

        self.style = Style()

        self.topRadioVar = StringVar()
        self.style.configure('ToptSch2.TRadiobutton', font=('宋体',9))
        self.optSch2 = Radiobutton(self.top, text='电路图 2', value='optSch2', variable=self.topRadioVar, command=self.optSch2_Cmd, style='ToptSch2.TRadiobutton')
        self.optSch2.setValue = lambda x: self.topRadioVar.set('optSch2' if x else '')
        self.optSch2.value = lambda : 1 if self.topRadioVar.get() == 'optSch2' else 0
        self.optSch2.place(relx=0.253, rely=0.93, relwidth=0.128, relheight=0.045)

        self.style.configure('ToptSch1.TRadiobutton', font=('宋体',9))
        self.optSch1 = Radiobutton(self.top, text='电路图 1', value='optSch1', variable=self.topRadioVar, command=self.optSch1_Cmd, style='ToptSch1.TRadiobutton')
        self.optSch1.setValue = lambda x: self.topRadioVar.set('optSch1' if x else '')
        self.optSch1.value = lambda : 1 if self.topRadioVar.get() == 'optSch1' else 0
        self.optSch1.setValue(1)
        self.optSch1.place(relx=0.078, rely=0.93, relwidth=0.128, relheight=0.045)

        self.cmdInverseCalVar = StringVar(value='通过电阻值计算门限电压')
        self.style.configure('TcmdInverseCal.TButton', font=('宋体',10))
        self.cmdInverseCal = Button(self.top, text='通过电阻值计算门限电压', textvariable=self.cmdInverseCalVar, command=self.cmdInverseCal_Cmd, style='TcmdInverseCal.TButton')
        self.cmdInverseCal.setText = lambda x: self.cmdInverseCalVar.set(x)
        self.cmdInverseCal.text = lambda : self.cmdInverseCalVar.get()
        self.cmdInverseCal.place(relx=0.682, rely=0.916, relwidth=0.294, relheight=0.059)

        self.cmdCalculateVar = StringVar(value='计算各电阻值')
        self.style.configure('TcmdCalculate.TButton', font=('宋体',10))
        self.cmdCalculate = Button(self.top, text='计算各电阻值', textvariable=self.cmdCalculateVar, command=self.cmdCalculate_Cmd, style='TcmdCalculate.TButton')
        self.cmdCalculate.setText = lambda x: self.cmdCalculateVar.set(x)
        self.cmdCalculate.text = lambda : self.cmdCalculateVar.get()
        self.cmdCalculate.place(relx=0.438, rely=0.916, relwidth=0.206, relheight=0.059)

        self.style.configure('TfrmOut.TLabelframe', font=('宋体',10))
        self.style.configure('TfrmOut.TLabelframe.Label', font=('宋体',10))
        self.frmOut = LabelFrame(self.top, text='输出结果', style='TfrmOut.TLabelframe')
        self.frmOut.place(relx=0.438, rely=0.501, relwidth=0.537, relheight=0.388)

        self.style.configure('TfrmIn.TLabelframe', font=('宋体',10))
        self.style.configure('TfrmIn.TLabelframe.Label', font=('宋体',10))
        self.frmIn = LabelFrame(self.top, text='输入参数', style='TfrmIn.TLabelframe')
        self.frmIn.place(relx=0.438, rely=0.086, relwidth=0.537, relheight=0.403)

        self.cavSch = Canvas(self.top, takefocus=1)
        self.cavSch.place(relx=0.019, rely=0.1, relwidth=0.386, relheight=0.789)

        self.Label2Var = StringVar(value='一乐论坛3AG1老师的LM324电池电量电路设计')
        self.style.configure('TLabel2.TLabel', anchor='w', font=('宋体',12))
        self.Label2 = Label(self.top, text='一乐论坛3AG1老师的LM324电池电量电路设计', textvariable=self.Label2Var, style='TLabel2.TLabel')
        self.Label2.setText = lambda x: self.Label2Var.set(x)
        self.Label2.text = lambda : self.Label2Var.get()
        self.Label2.place(relx=0.019, rely=0.029, relwidth=0.43, relheight=0.045)

        self.lblLinkVar = StringVar(value='原帖地址：https://www.yleee.com.cn/thread-84439-1-1.html')
        self.style.configure('TlblLink.TLabel', anchor='e', foreground='#0000FF', font=('宋体',9,'underline'))
        self.lblLink = Label(self.top, text='原帖地址：https://www.yleee.com.cn/thread-84439-1-1.html', textvariable=self.lblLinkVar, style='TlblLink.TLabel')
        self.lblLink.setText = lambda x: self.lblLinkVar.set(x)
        self.lblLink.text = lambda : self.lblLinkVar.get()
        self.lblLink.place(relx=0.487, rely=0.029, relwidth=0.44, relheight=0.045)
        self.lblLink.bind('<Button-1>', self.lblLink_Button_1)

        self.txtR5Var = StringVar(value='')
        self.txtR5 = Entry(self.frmOut, textvariable=self.txtR5Var, font=('宋体',10))
        self.txtR5.setText = lambda x: self.txtR5Var.set(x)
        self.txtR5.text = lambda : self.txtR5Var.get()
        self.txtR5.place(relx=0.236, rely=0.546, relwidth=0.184, relheight=0.097)

        self.txtR7Var = StringVar(value='')
        self.txtR7 = Entry(self.frmOut, textvariable=self.txtR7Var, font=('宋体',10))
        self.txtR7.setText = lambda x: self.txtR7Var.set(x)
        self.txtR7.text = lambda : self.txtR7Var.get()
        self.txtR7.place(relx=0.236, rely=0.695, relwidth=0.184, relheight=0.097)

        self.lblHideR7R8Var = StringVar(value='')
        self.style.configure('TlblHideR7R8.TLabel', anchor='w', font=('宋体',9))
        self.lblHideR7R8 = Label(self.frmOut, textvariable=self.lblHideR7R8Var, style='TlblHideR7R8.TLabel')
        self.lblHideR7R8.setText = lambda x: self.lblHideR7R8Var.set(x)
        self.lblHideR7R8.text = lambda : self.lblHideR7R8Var.get()
        self.lblHideR7R8.place(relx=0.018, rely=0.811, relwidth=0.51, relheight=0.152)

        self.lblR3Var = StringVar(value='R3')
        self.style.configure('TlblR3.TLabel', anchor='e', font=('宋体',10))
        self.lblR3 = Label(self.frmOut, text='R3', textvariable=self.lblR3Var, style='TlblR3.TLabel')
        self.lblR3.setText = lambda x: self.lblR3Var.set(x)
        self.lblR3.text = lambda : self.lblR3Var.get()
        self.lblR3.place(relx=0.018, rely=0.258, relwidth=0.184, relheight=0.078)

        self.Label14Var = StringVar(value='实际门限电压2')
        self.style.configure('TLabel14.TLabel', anchor='e', font=('宋体',10))
        self.Label14 = Label(self.frmOut, text='实际门限电压2', textvariable=self.Label14Var, style='TLabel14.TLabel')
        self.Label14.setText = lambda x: self.Label14Var.set(x)
        self.Label14.text = lambda : self.Label14Var.get()
        self.Label14.place(relx=0.49, rely=0.258, relwidth=0.274, relheight=0.078)

        self.lblThresholdVol2Var = StringVar(value='')
        self.style.configure('TlblThresholdVol2.TLabel', relief=SUNKEN, anchor='w', font=('宋体',10))
        self.lblThresholdVol2 = Label(self.frmOut, textvariable=self.lblThresholdVol2Var, style='TlblThresholdVol2.TLabel')
        self.lblThresholdVol2.setText = lambda x: self.lblThresholdVol2Var.set(x)
        self.lblThresholdVol2.text = lambda : self.lblThresholdVol2Var.get()
        self.lblThresholdVol2.place(relx=0.798, rely=0.258, relwidth=0.147, relheight=0.078)

        self.lblR8Var = StringVar(value='R8')
        self.style.configure('TlblR8.TLabel', anchor='e', font=('宋体',10))
        self.lblR8 = Label(self.frmOut, text='R8', textvariable=self.lblR8Var, style='TlblR8.TLabel')
        self.lblR8.setText = lambda x: self.lblR8Var.set(x)
        self.lblR8.text = lambda : self.lblR8Var.get()
        self.lblR8.place(relx=0.018, rely=0.848, relwidth=0.184, relheight=0.078)

        self.lblThresholdVol4Var = StringVar(value='')
        self.style.configure('TlblThresholdVol4.TLabel', relief=SUNKEN, anchor='w', font=('宋体',10))
        self.lblThresholdVol4 = Label(self.frmOut, textvariable=self.lblThresholdVol4Var, style='TlblThresholdVol4.TLabel')
        self.lblThresholdVol4.setText = lambda x: self.lblThresholdVol4Var.set(x)
        self.lblThresholdVol4.text = lambda : self.lblThresholdVol4Var.get()
        self.lblThresholdVol4.place(relx=0.798, rely=0.553, relwidth=0.147, relheight=0.078)

        self.lblThresholdVol3Var = StringVar(value='')
        self.style.configure('TlblThresholdVol3.TLabel', relief=SUNKEN, anchor='w', font=('宋体',10))
        self.lblThresholdVol3 = Label(self.frmOut, textvariable=self.lblThresholdVol3Var, style='TlblThresholdVol3.TLabel')
        self.lblThresholdVol3.setText = lambda x: self.lblThresholdVol3Var.set(x)
        self.lblThresholdVol3.text = lambda : self.lblThresholdVol3Var.get()
        self.lblThresholdVol3.place(relx=0.798, rely=0.406, relwidth=0.147, relheight=0.078)

        self.lblThresholdVol1Var = StringVar(value='')
        self.style.configure('TlblThresholdVol1.TLabel', relief=SUNKEN, anchor='w', font=('宋体',10))
        self.lblThresholdVol1 = Label(self.frmOut, textvariable=self.lblThresholdVol1Var, style='TlblThresholdVol1.TLabel')
        self.lblThresholdVol1.setText = lambda x: self.lblThresholdVol1Var.set(x)
        self.lblThresholdVol1.text = lambda : self.lblThresholdVol1Var.get()
        self.lblThresholdVol1.place(relx=0.798, rely=0.111, relwidth=0.147, relheight=0.078)

        self.Label16Var = StringVar(value='实际门限电压4')
        self.style.configure('TLabel16.TLabel', anchor='e', font=('宋体',10))
        self.Label16 = Label(self.frmOut, text='实际门限电压4', textvariable=self.Label16Var, style='TLabel16.TLabel')
        self.Label16.setText = lambda x: self.Label16Var.set(x)
        self.Label16.text = lambda : self.Label16Var.get()
        self.Label16.place(relx=0.49, rely=0.553, relwidth=0.274, relheight=0.078)

        self.Label15Var = StringVar(value='实际门限电压3')
        self.style.configure('TLabel15.TLabel', anchor='e', font=('宋体',10))
        self.Label15 = Label(self.frmOut, text='实际门限电压3', textvariable=self.Label15Var, style='TLabel15.TLabel')
        self.Label15.setText = lambda x: self.Label15Var.set(x)
        self.Label15.text = lambda : self.Label15Var.get()
        self.Label15.place(relx=0.49, rely=0.406, relwidth=0.274, relheight=0.078)

        self.Label13Var = StringVar(value='实际门限电压1')
        self.style.configure('TLabel13.TLabel', anchor='e', font=('宋体',10))
        self.Label13 = Label(self.frmOut, text='实际门限电压1', textvariable=self.Label13Var, style='TLabel13.TLabel')
        self.Label13.setText = lambda x: self.Label13Var.set(x)
        self.Label13.text = lambda : self.Label13Var.get()
        self.Label13.place(relx=0.49, rely=0.111, relwidth=0.274, relheight=0.078)

        self.lblR7Var = StringVar(value='R6 + R7')
        self.style.configure('TlblR7.TLabel', anchor='e', font=('宋体',10))
        self.lblR7 = Label(self.frmOut, text='R6 + R7', textvariable=self.lblR7Var, style='TlblR7.TLabel')
        self.lblR7.setText = lambda x: self.lblR7Var.set(x)
        self.lblR7.text = lambda : self.lblR7Var.get()
        self.lblR7.place(relx=0.018, rely=0.7, relwidth=0.184, relheight=0.078)

        self.lblR5Var = StringVar(value='R5')
        self.style.configure('TlblR5.TLabel', anchor='e', font=('宋体',10))
        self.lblR5 = Label(self.frmOut, text='R5', textvariable=self.lblR5Var, style='TlblR5.TLabel')
        self.lblR5.setText = lambda x: self.lblR5Var.set(x)
        self.lblR5.text = lambda : self.lblR5Var.get()
        self.lblR5.place(relx=0.018, rely=0.553, relwidth=0.184, relheight=0.078)

        self.lblR4Var = StringVar(value='R4')
        self.style.configure('TlblR4.TLabel', anchor='e', font=('宋体',10))
        self.lblR4 = Label(self.frmOut, text='R4', textvariable=self.lblR4Var, style='TlblR4.TLabel')
        self.lblR4.setText = lambda x: self.lblR4Var.set(x)
        self.lblR4.text = lambda : self.lblR4Var.get()
        self.lblR4.place(relx=0.018, rely=0.406, relwidth=0.184, relheight=0.078)

        self.lblR2Var = StringVar(value='R2')
        self.style.configure('TlblR2.TLabel', anchor='e', font=('宋体',10))
        self.lblR2 = Label(self.frmOut, text='R2', textvariable=self.lblR2Var, style='TlblR2.TLabel')
        self.lblR2.setText = lambda x: self.lblR2Var.set(x)
        self.lblR2.text = lambda : self.lblR2Var.get()
        self.lblR2.place(relx=0.018, rely=0.111, relwidth=0.184, relheight=0.078)

        self.txtR3Var = StringVar(value='')
        self.txtR3 = Entry(self.frmOut, textvariable=self.txtR3Var, font=('宋体',10))
        self.txtR3.setText = lambda x: self.txtR3Var.set(x)
        self.txtR3.text = lambda : self.txtR3Var.get()
        self.txtR3.place(relx=0.236, rely=0.246, relwidth=0.184, relheight=0.097)

        self.cmbResistorSerialList = ['E12','E24',]
        self.cmbResistorSerialVar = StringVar(value='E12')
        self.cmbResistorSerial = Combobox(self.frmIn, state='readonly', text='E12', textvariable=self.cmbResistorSerialVar, values=self.cmbResistorSerialList, font=('宋体',9))
        self.cmbResistorSerial.setText = lambda x: self.cmbResistorSerialVar.set(x)
        self.cmbResistorSerial.text = lambda : self.cmbResistorSerialVar.get()
        self.cmbResistorSerial.place(relx=0.526, rely=0.853, relwidth=0.184)

        self.txtReferenceVolVar = StringVar(value='2.5')
        self.txtReferenceVol = Entry(self.frmIn, textvariable=self.txtReferenceVolVar, font=('宋体',10))
        self.txtReferenceVol.setText = lambda x: self.txtReferenceVolVar.set(x)
        self.txtReferenceVol.text = lambda : self.txtReferenceVolVar.get()
        self.txtReferenceVol.place(relx=0.526, rely=0.711, relwidth=0.184, relheight=0.08)

        self.txtThresholdVol4Var = StringVar(value='13.5')
        self.txtThresholdVol4 = Entry(self.frmIn, textvariable=self.txtThresholdVol4Var, font=('宋体',10))
        self.txtThresholdVol4.setText = lambda x: self.txtThresholdVol4Var.set(x)
        self.txtThresholdVol4.text = lambda : self.txtThresholdVol4Var.get()
        self.txtThresholdVol4.place(relx=0.526, rely=0.569, relwidth=0.184, relheight=0.08)

        self.txtThresholdVol3Var = StringVar(value='12.5')
        self.txtThresholdVol3 = Entry(self.frmIn, textvariable=self.txtThresholdVol3Var, font=('宋体',10))
        self.txtThresholdVol3.setText = lambda x: self.txtThresholdVol3Var.set(x)
        self.txtThresholdVol3.text = lambda : self.txtThresholdVol3Var.get()
        self.txtThresholdVol3.place(relx=0.526, rely=0.427, relwidth=0.184, relheight=0.08)

        self.txtThresholdVol2Var = StringVar(value='12')
        self.txtThresholdVol2 = Entry(self.frmIn, textvariable=self.txtThresholdVol2Var, font=('宋体',10))
        self.txtThresholdVol2.setText = lambda x: self.txtThresholdVol2Var.set(x)
        self.txtThresholdVol2.text = lambda : self.txtThresholdVol2Var.get()
        self.txtThresholdVol2.place(relx=0.526, rely=0.284, relwidth=0.184, relheight=0.08)

        self.txtThresholdVol1Var = StringVar(value='11.5')
        self.txtThresholdVol1 = Entry(self.frmIn, textvariable=self.txtThresholdVol1Var, font=('宋体',10))
        self.txtThresholdVol1.setText = lambda x: self.txtThresholdVol1Var.set(x)
        self.txtThresholdVol1.text = lambda : self.txtThresholdVol1Var.get()
        self.txtThresholdVol1.place(relx=0.526, rely=0.142, relwidth=0.184, relheight=0.08)

        self.Label1Var = StringVar(value='电阻系列')
        self.style.configure('TLabel1.TLabel', anchor='e', font=('宋体',10))
        self.Label1 = Label(self.frmIn, text='电阻系列', textvariable=self.Label1Var, style='TLabel1.TLabel')
        self.Label1.setText = lambda x: self.Label1Var.set(x)
        self.Label1.text = lambda : self.Label1Var.get()
        self.Label1.place(relx=0.145, rely=0.853, relwidth=0.329, relheight=0.076)

        self.Label7Var = StringVar(value='参考电压')
        self.style.configure('TLabel7.TLabel', anchor='e', font=('宋体',10))
        self.Label7 = Label(self.frmIn, text='参考电压', textvariable=self.Label7Var, style='TLabel7.TLabel')
        self.Label7.setText = lambda x: self.Label7Var.set(x)
        self.Label7.text = lambda : self.Label7Var.get()
        self.Label7.place(relx=0.145, rely=0.711, relwidth=0.329, relheight=0.076)

        self.Label6Var = StringVar(value='门限电压4 (LED4点亮)')
        self.style.configure('TLabel6.TLabel', anchor='e', font=('宋体',10))
        self.Label6 = Label(self.frmIn, text='门限电压4 (LED4点亮)', textvariable=self.Label6Var, style='TLabel6.TLabel')
        self.Label6.setText = lambda x: self.Label6Var.set(x)
        self.Label6.text = lambda : self.Label6Var.get()
        self.Label6.place(relx=0.145, rely=0.569, relwidth=0.329, relheight=0.076)

        self.Label5Var = StringVar(value='门限电压3 (LED3点亮)')
        self.style.configure('TLabel5.TLabel', anchor='e', font=('宋体',10))
        self.Label5 = Label(self.frmIn, text='门限电压3 (LED3点亮)', textvariable=self.Label5Var, style='TLabel5.TLabel')
        self.Label5.setText = lambda x: self.Label5Var.set(x)
        self.Label5.text = lambda : self.Label5Var.get()
        self.Label5.place(relx=0.145, rely=0.427, relwidth=0.329, relheight=0.076)

        self.Label4Var = StringVar(value='门限电压2 (LED2点亮)')
        self.style.configure('TLabel4.TLabel', anchor='e', font=('宋体',10))
        self.Label4 = Label(self.frmIn, text='门限电压2 (LED2点亮)', textvariable=self.Label4Var, style='TLabel4.TLabel')
        self.Label4.setText = lambda x: self.Label4Var.set(x)
        self.Label4.text = lambda : self.Label4Var.get()
        self.Label4.place(relx=0.145, rely=0.284, relwidth=0.329, relheight=0.076)

        self.Label3Var = StringVar(value='门限电压1 (LED1点亮)')
        self.style.configure('TLabel3.TLabel', anchor='e', font=('宋体',10))
        self.Label3 = Label(self.frmIn, text='门限电压1 (LED1点亮)', textvariable=self.Label3Var, style='TLabel3.TLabel')
        self.Label3.setText = lambda x: self.Label3Var.set(x)
        self.Label3.text = lambda : self.Label3Var.get()
        self.Label3.place(relx=0.145, rely=0.142, relwidth=0.329, relheight=0.076)

        self.txtR8Var = StringVar(value='')
        self.txtR8 = Entry(self.frmOut, textvariable=self.txtR8Var, font=('宋体',10))
        self.txtR8.setText = lambda x: self.txtR8Var.set(x)
        self.txtR8.text = lambda : self.txtR8Var.get()
        self.txtR8.place(relx=0.236, rely=0.845, relwidth=0.184, relheight=0.097)

        self.txtR2Var = StringVar(value='')
        self.txtR2 = Entry(self.frmOut, textvariable=self.txtR2Var, font=('宋体',10))
        self.txtR2.setText = lambda x: self.txtR2Var.set(x)
        self.txtR2.text = lambda : self.txtR2Var.get()
        self.txtR2.place(relx=0.236, rely=0.111, relwidth=0.184, relheight=0.097)

        self.txtR4Var = StringVar(value='')
        self.txtR4 = Entry(self.frmOut, textvariable=self.txtR4Var, font=('宋体',10))
        self.txtR4.setText = lambda x: self.txtR4Var.set(x)
        self.txtR4.text = lambda : self.txtR4Var.get()
        self.txtR4.place(relx=0.236, rely=0.396, relwidth=0.184, relheight=0.097)

        self.cmdMoreVar = StringVar(value='其他组合...')
        self.style.configure('TcmdMore.TButton', font=('宋体',9))
        self.cmdMore = Button(self.frmOut, text='其他组合...', textvariable=self.cmdMoreVar, command=self.cmdMore_Cmd, style='TcmdMore.TButton')
        self.cmdMore.setText = lambda x: self.cmdMoreVar.set(x)
        self.cmdMore.text = lambda : self.cmdMoreVar.get()
        self.cmdMore.place(relx=0.544, rely=0.737, relwidth=0.22, relheight=0.097)

class Application(Application_ui):
    #这个类实现具体的事件处理回调函数。界面生成代码在Application_ui中。
    def __init__(self, master=None):
        Application_ui.__init__(self, master)
        self.master.title('LM324电量指示设计软件v1.3')
        self.idSchImage = None
        self.mnuMore = None
        self.cmbResistorSerial.setText('E24')
        self.bindEvents()
        self.optSch1_Cmd()
        
        #self.txtThresholdVol1.setText('15')
        #self.txtThresholdVol2.setText('16.4')
        #self.txtThresholdVol3.setText('18')
        #self.txtThresholdVol4.setText('19.5')

    #绑定一些事件
    def bindEvents(self):
        self.txtThresholdVol1.bind('<Return>', lambda x: self.focusAndSelectAll(self.txtThresholdVol2))
        self.txtThresholdVol2.bind('<Return>', lambda x: self.focusAndSelectAll(self.txtThresholdVol3))
        self.txtThresholdVol3.bind('<Return>', lambda x: self.focusAndSelectAll(self.txtThresholdVol4))
        self.txtThresholdVol4.bind('<Return>', lambda x: self.focusAndSelectAll(self.txtReferenceVol))
        self.txtReferenceVol.bind('<Return>', lambda x: self.focusAndSelectAll(self.cmbResistorSerial))
        self.cmbResistorSerial.bind('<Return>', lambda x: self.focusAndSelectAll(self.txtR2))
        self.txtR2.bind('<Return>', lambda x: self.focusAndSelectAll(self.txtR3))
        self.txtR3.bind('<Return>', lambda x: self.focusAndSelectAll(self.txtR4))
        self.txtR4.bind('<Return>', lambda x: self.focusAndSelectAll(self.txtR5))
        self.txtR5.bind('<Return>', lambda x: self.focusAndSelectAll(self.txtR7))

        self.txtThresholdVol1.bind('<Tab>', lambda x: self.focusAndSelectAll(self.txtThresholdVol2))
        self.txtThresholdVol2.bind('<Tab>', lambda x: self.focusAndSelectAll(self.txtThresholdVol3))
        self.txtThresholdVol3.bind('<Tab>', lambda x: self.focusAndSelectAll(self.txtThresholdVol4))
        self.txtThresholdVol4.bind('<Tab>', lambda x: self.focusAndSelectAll(self.txtReferenceVol))
        self.txtReferenceVol.bind('<Tab>', lambda x: self.focusAndSelectAll(self.cmbResistorSerial))
        self.cmbResistorSerial.bind('<Tab>', lambda x: self.focusAndSelectAll(self.txtR2))
        self.txtR2.bind('<Tab>', lambda x: self.focusAndSelectAll(self.txtR3))
        self.txtR3.bind('<Tab>', lambda x: self.focusAndSelectAll(self.txtR4))
        self.txtR4.bind('<Tab>', lambda x: self.focusAndSelectAll(self.txtR5))
        self.txtR5.bind('<Tab>', lambda x: self.focusAndSelectAll(self.txtR7))

    #设置一个文本框的焦点并且全选其中的文本
    def focusAndSelectAll(self, txtWidget):
        txtWidget.focus_set()
        if isinstance(txtWidget, Entry):
            txtWidget.select_range(0, 'end')
            txtWidget.icursor('end')
        return("break") #Tab事件使用

    #链接的点击事件
    def lblLink_Button_1(self, event):
        os.startfile('https://www.yleee.com.cn/thread-84439-1-1.html')

    #选择第一个电路图
    def optSch1_Cmd(self, event=None):
        self.schImg = PhotoImage(data=schData1)
        if self.idSchImage:
            self.cavSch.delete(self.idSchImage)
        self.idSchImage = self.cavSch.create_image(0,0, image=self.schImg, anchor=NW)
        self.lblR8.lower(self.lblHideR7R8) #隐藏R8
        self.txtR8.lower(self.lblHideR7R8)
        self.lblR5.setText('R5')
        self.lblR7.setText('R6 + R7')
        self.clearResults()

    #选择第二个电路图
    def optSch２_Cmd(self, event=None):
        self.schImg = PhotoImage(data=schData2)
        if self.idSchImage:
            self.cavSch.delete(self.idSchImage)
        self.idSchImage = self.cavSch.create_image(0,0, image=self.schImg, anchor=NW)
        self.lblR8.lift(self.lblHideR7R8) #显示R8
        self.txtR8.lift(self.lblHideR7R8)
        self.lblR5.setText('R5 + R6')
        self.lblR7.setText('R7')
        self.clearResults()
        
    #清除结果数据
    def clearResults(self):
        self.txtR2.setText('')
        self.txtR3.setText('')
        self.txtR4.setText('')
        self.txtR5.setText('')
        self.txtR7.setText('')
        self.txtR8.setText('')
        self.lblThresholdVol1.setText('')
        self.lblThresholdVol2.setText('')
        self.lblThresholdVol3.setText('')
        self.lblThresholdVol4.setText('')
        self.mnuMore = None
        self.cmdMore.configure(state='disabled')

    #点击其他组合按钮，弹出菜单
    def cmdMore_Cmd(self, event=None):
        if self.mnuMore:
            try:         
                x = self.master.winfo_pointerx() # - self.master.winfo_vrootx()
                y = self.master.winfo_pointery() # - self.master.winfo_vrooty()
                self.mnuMore.tk_popup(x, y + 10, 0)
            finally:
                self.mnuMore.grab_release()

    #创建其他组合菜单
    #rList: 电阻组合
    def createMenuMore(self, rList, refVol):
        self.cmdMore.configure(state='normal')
        self.mnuMore = Menu(self.master, tearoff=0)
        bgColor = self.mnuMore['background']
        if len(rList[0]) == 5: #电路图1
            self.mnuMore.add_command(label='R2,R3,R4,R5,R6+R7', state='disabled', activebackground=bgColor)
        else:
            self.mnuMore.add_command(label='R2,R3,R4,R5+R6,R7,R8', state='disabled', activebackground=bgColor)
        self.mnuMore.add_separator()

        for r in rList[:30]: #取前30个选择即可
            if (len(r) == 5): #电路图1
                R2, R3, R4, R5, R7 = r
                txt = '{},{},{},{},{}'.format(resistorFloatToTxt(R2), resistorFloatToTxt(R3), resistorFloatToTxt(R4), 
                    resistorFloatToTxt(R5), str(round(R7)))
                self.mnuMore.add_command(label=txt, 
                    command=partial(self.cmdMnuApply, R2=R2, R3=R3, R4=R4, R5=R5, R7=R7, refVol=refVol))
            else:
                R2, R3, R4, R5, R7, R8 = r
                txt = '{},{},{},{},{},{}'.format(resistorFloatToTxt(R2), resistorFloatToTxt(R3), resistorFloatToTxt(R4), 
                    str(round(R5)), resistorFloatToTxt(R7), resistorFloatToTxt(R8))
                self.mnuMore.add_command(label=txt, 
                    command=partial(self.cmdMnuApply, R2=R2, R3=R3, R4=R4, R5=R5, R7=R7, R8=R8, refVol=refVol))
    
    #将其他组合的电阻值应用到文本框
    def cmdMnuApply(self, R2, R3, R4, R5, R7, refVol, R8=None):
        if R8: #电路图2
            self.txtR2.setText(resistorFloatToTxt(R2))
            self.txtR3.setText(resistorFloatToTxt(R3))
            self.txtR4.setText(resistorFloatToTxt(R4))
            self.txtR5.setText(str(round(R5)))  #这个是两个电阻的串联，不是标准电阻
            self.txtR7.setText(resistorFloatToTxt(R7))
            self.txtR8.setText(resistorFloatToTxt(R8))

            newT1, newT2, newT3, newT4 = calThresholdsSch2(R2=R2, R3=R3, R4=R4, R5=R5, R7=R7, R8=R8, refVol=refVol)
            self.lblThresholdVol1.setText('%.2f' % newT1)
            self.lblThresholdVol2.setText('%.2f' % newT2)
            self.lblThresholdVol3.setText('%.2f' % newT3)
            self.lblThresholdVol4.setText('%.2f' % newT4)
        else:
            self.txtR2.setText(resistorFloatToTxt(R2))
            self.txtR3.setText(resistorFloatToTxt(R3))
            self.txtR4.setText(resistorFloatToTxt(R4))
            self.txtR5.setText(resistorFloatToTxt(R5))
            self.txtR7.setText(str(round(R7))) #这个是两个电阻的串联，不是标准电阻

            newT1, newT2, newT3, newT4 = calThresholds(R2=R2, R3=R3, R4=R4, R5=R5, R6=R7, refVol=refVol)
            self.lblThresholdVol1.setText('%.2f' % newT1)
            self.lblThresholdVol2.setText('%.2f' % newT2)
            self.lblThresholdVol3.setText('%.2f' % newT3)
            self.lblThresholdVol4.setText('%.2f' % newT4)

    #根据门限值计算电阻组合
    def cmdCalculate_Cmd(self, event=None):
        refVol = str_to_float(self.txtReferenceVol.text())
        if refVol <= 0.0:
            showinfo('参考电压错误', '参考电压要大于等于零')
            return

        vol1 = str_to_float(self.txtThresholdVol1.text())
        vol2 = str_to_float(self.txtThresholdVol2.text())
        vol3 = str_to_float(self.txtThresholdVol3.text())
        vol4 = str_to_float(self.txtThresholdVol4.text())
        if not all((vol1 > refVol, vol2 > vol1, vol3 > vol2, vol4 > vol3)):
            showinfo('门限电压错误', '门限电压要大于参考电压，且门限电压1为最小电压，门限电压4为最大电压')
            return

        e24 = 1 if (self.cmbResistorSerial.text() != 'E12') else 0

        if (self.optSch1.value()): #电路图1
            ret = calAllResistors(vol1, vol2, vol3, vol4, refVol=refVol, e24=e24)
            if not ret:
                if e24:
                    txtInfo = '在标准电阻系列中找不到满足设定条件的组合，重新调整一下参数再试试？'
                else:
                    txtInfo = '在标准电阻系列中找不到满足设定条件的组合，重新调整一下参数再试试？\n\n或者可以考虑切换电阻系列为E24'
                showinfo('出错了', txtInfo)
                self.clearResults()
                return

            self.createMenuMore(ret, refVol)
            R2, R3, R4, R5, R6 = ret[0]
            self.txtR2.setText(resistorFloatToTxt(R2))
            self.txtR3.setText(resistorFloatToTxt(R3))
            self.txtR4.setText(resistorFloatToTxt(R4))
            self.txtR5.setText(resistorFloatToTxt(R5))
            self.txtR7.setText(str(round(R6))) #这个是两个电阻的串联，不是标准电阻

            newT1, newT2, newT3, newT4 = calThresholds(R2=R2, R3=R3, R4=R4, R5=R5, R6=R6, refVol=refVol)
            self.lblThresholdVol1.setText('%.2f' % newT1)
            self.lblThresholdVol2.setText('%.2f' % newT2)
            self.lblThresholdVol3.setText('%.2f' % newT3)
            self.lblThresholdVol4.setText('%.2f' % newT4)
        else: #电路图2
            ret = calAllResistorsSch2(vol1, vol2, vol3, vol4, refVol=refVol, e24=e24)
            if not ret:
                if e24:
                    txtInfo = '在标准电阻系列中找不到满足设定条件的组合，重新调整一下参数再试试？'
                else:
                    txtInfo = '在标准电阻系列中找不到满足设定条件的组合，重新调整一下参数再试试？\n\n或者可以考虑切换电阻系列为E24'
                showinfo('出错了', txtInfo)
                self.clearResults()
                return

            self.createMenuMore(ret, refVol)
            R2, R3, R4, R5, R7, R8 = ret[0]
            self.txtR2.setText(resistorFloatToTxt(R2))
            self.txtR3.setText(resistorFloatToTxt(R3))
            self.txtR4.setText(resistorFloatToTxt(R4))
            self.txtR5.setText(str(round(R5))) #这个是两个电阻的串联，不是标准电阻
            self.txtR7.setText(resistorFloatToTxt(R7))
            self.txtR8.setText(resistorFloatToTxt(R8))

            newT1, newT2, newT3, newT4 = calThresholdsSch2(R2=R2, R3=R3, R4=R4, R5=R5, R7=R7, R8=R8, refVol=refVol)
            self.lblThresholdVol1.setText('%.2f' % newT1)
            self.lblThresholdVol2.setText('%.2f' % newT2)
            self.lblThresholdVol3.setText('%.2f' % newT3)
            self.lblThresholdVol4.setText('%.2f' % newT4)

    #根据电阻组合计算门限值
    def cmdInverseCal_Cmd(self, event=None):
        refVol = str_to_float(self.txtReferenceVol.text())
        if refVol <= 0.0:
            showinfo('参考电压错误', '参考电压要大于等于零')
            return

        R2 = resistorTxtToFloat(self.txtR2.text())
        R3 = resistorTxtToFloat(self.txtR3.text())
        R4 = resistorTxtToFloat(self.txtR4.text())
        R5 = resistorTxtToFloat(self.txtR5.text())
        R7 = resistorTxtToFloat(self.txtR7.text())
        R8 = resistorTxtToFloat(self.txtR8.text())
        if not all((R2 > 0.0, R3 > 0.0, R4 > 0.0, R5 > 0.0, R7 > 0.0)):
            showinfo('参数错误', '有部分电阻阻值错误')
            return

        if (self.optSch1.value()): #电路图1
            newT1, newT2, newT3, newT4 = calThresholds(R2=R2, R3=R3, R4=R4, R5=R5, R6=R7, refVol=refVol)
        else:
            if (R8 <= 0.0):
                showinfo('参数错误', '有部分电阻阻值错误')
                return
            newT1, newT2, newT3, newT4 = calThresholdsSch2(R2=R2, R3=R3, R4=R4, R5=R5, R7=R7, R8=R8, refVol=refVol)

        self.lblThresholdVol1.setText('%.2f' % newT1)
        self.lblThresholdVol2.setText('%.2f' % newT2)
        self.lblThresholdVol3.setText('%.2f' % newT3)
        self.lblThresholdVol4.setText('%.2f' % newT4)

if __name__ == "__main__":
    top = Tk()
    Application(top).mainloop()



